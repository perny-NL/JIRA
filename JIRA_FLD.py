import sysclass Jira_fld:    def __init__(self, lli, cli, rst):        self.lli = lli        self.cli = cli        self.rst = rst        self.roles = {}        self.users = {}        self.projects = {}        self.versions = {}        self.versionsReleased = {}        self.components = {}        self.types = {}        self.subtypes = {}        self.priorities = {}        self.statuses = {}                self.resolutions = {}        self.filters = {}        self.filter_count = {}        self.dependencies = {}        self.attachments = {}        self.worklogs = {}        self.comments = {}        self.transactions = {}        self.history = {}        self.labels = {}        # reset    def reset(self, key):        if (key in self.dependencies):            del(self.dependencies[key])        if (key in self.attachments):            del(self.attachments[key])        if (key in self.worklogs):            del(self.worklogs[key])        if (key in self.comments):            del(self.comments[key])        if (key in self.transactions):            del(self.transactions[key])        if (key in self.history):            del(self.history[key])        if (key in self.labels):            del(self.labels[key])        # ROLES    def getRoles(self, force=False):        if (force or (not self.roles)):            self.roles = self.lli.getRoles()        return self.roles    # PROJECTS    def getProjects(self, force=False):        if (force or (not self.projects)):            self.projects = self.lli.getProjects()        return self.projects    # USER    def getAllUsers(self):        return self.users        def getUser(self, user, force=False, **kwargs):#        if (user is None):#            return {"name":"None", "email":"None"}#        if (not user):#            print "Empty user name"#            sys.exit()        if (user == "None"):            return {"name":"None", "email":"None"}        if (force or (user not in self.users)):            self.users[user] = self.lli.getUser(user, **kwargs)        return self.users[user]    # VERSIONS    def getVersionsList(self, project, releaseOnly=False, force=False):        if (force or (project not in self.versions)):            self.versions[project] = self.lli.getVersionsList(project)            res = {}            tmp = self.versions[project]            for i in tmp:                if (tmp[i]["released"]):                    res[i] = tmp[i]            self.versionsReleased[project] = res        if (releaseOnly):            return self.versionsReleased[project]        else:            return self.versions[project]    # COMPONENTS    def getComponentsList(self, project, force=False):        if (force or (project not in self.components)):            self.components[project] = self.lli.getComponentsList(project)        return self.components[project]    # TYPES    def getTypesList(self, force=False):        if (force or (not self.types)):            self.types = self.lli.getTypesList()        return self.types    # SUBTYPES    def getSubTypesList(self, project, force=False):        if (force or (project not in self.subtypes)):            self.subtypes[project] = self.lli.getSubTypesList(project)        return self.subtypes[project]    # TYPES (COMBINED)    def getCombinedTypesList(self, project, force=False):        res = self.getTypesList(force)        if (project):            res.update(self.getSubTypesList(project, force))        return res    def getMinimalTypesList(self, project, force=False):        MINIMAL_TYPES = ["Code Improvement","Bug","Task","New Feature","Improvement","User Story","Design","Test Case","Sub-task","Impediment","Epic","Field Return"]        res = {}        if (project):            tmp = self.getCombinedTypesList(project, force)        else:            tmp = self.getTypesList(force)        for k in tmp:            if (tmp[k]["name"] in MINIMAL_TYPES):                res[k] = tmp[k]        return res    # PRIORITIES    def getPrioritiesList(self, force=False):        if (force or (not self.priorities)):            self.priorities = self.lli.getPrioritiesList()        return self.priorities    # STATUSES    def getStatusesList(self, force=False):        if (force or (not self.statuses)):            self.statuses = self.lli.getStatusesList()        return self.statuses            def getMinimalStatusesList(self, force=False):        MINIMAL_STATUSES = ["Open","Done","Ready For Testing","Reopened","In Progress","Closed","In Testing","Waiting for information from user","Ready For Integration", \                            "Ready For Review","On Hold","Resolved","Verified","In Analysis","Analysed","In Test","Tested","Postponed","Rejected","In Review"]        res = {}        tmp = self.getStatusesList(force)        for k in tmp:            if (tmp[k]["name"] in MINIMAL_STATUSES):                res[k] = tmp[k]        return res            # RESOLUTIONS    def getResolutionsList(self, force=False):        if (force or (not self.resolutions)):            self.resolutions = self.lli.getResolutionsList()        return self.resolutions    # FILTERS    def getFavouriteFilters(self, force=False):        if (force or (not self.filters)):            self.filters = self.lli.getFavouriteFilters()        return self.filters    # FILTER COUNT    def getIssueCountForFilter(self, id, force=False):        if (force or (id not in self.filter_count)):            self.filter_count[id] = self.lli.getIssueCountForFilter(id)        return self.filter_count[id]        def existsFilterCount(self, key):        if (key in self.filter_count):            return self.filter_count[key]        else:            return None        # DEPENDENCY    def getDependencies(self, key, force=False, **kwargs):        if (force or (key not in self.dependencies)):            self.dependencies[key] = self.lli.getDependencies(key, **kwargs)        return self.dependencies[key]    def existsDependencies(self, key):        if (key in self.dependencies):            return self.dependencies[key]        else:            return None    # ATTACHMENTS    def getAttachments(self, key, force=False):        if (force or (key not in self.attachments)):            self.attachments[key] = self.lli.getAttachments(key)        return self.attachments[key]    # WORKLOGS    def getWorklogs(self, key, force=False):        if (force or (key not in self.worklogs)):            self.worklogs[key] = self.lli.getWorklogs(key)        return self.worklogs[key]    # COMMENTS    def getComments(self, key, force=False, **kwargs):        if (force or (key not in self.comments)):            self.comments[key] = self.lli.getComments(key, **kwargs)        return self.comments[key]    def existsComments(self, key):        if (key in self.comments):            return self.comments[key]        else:            return None    # TRANSACTIONS    def getTransitions(self, key, reporter, created, force=False):        if (force or (key not in self.transactions)):            res = self.lli.getTransitions(key)            values = {"executor":reporter, "status":"Open", "when":created}            if (res):                res[0] = values            else:                res.insert(0, values)            self.transactions[key] = res        return self.transactions[key]    # HISTORY    def getHistory(self, key, force=False, interface="soap"):        if (force or (key not in self.history)):            if (interface == "soap"):                self.history[key] = self.lli.getHistory(key)            elif (interface == "rest"):                self.history[key] = self.rst.getHistory(key)        return self.history[key]        # LABELS    def getLabels(self, key, force=False, interface="soap"):        labels = ""        if (force or (key not in self.labels)):            if (interface == "soap"):                stop = False                history = self.getHistory(key, force)                #for word1,word2 in ((w1,w2) for w1 in buf1 for w2 in buf2):                for item in reversed(history):                    for change in item["changes"]:                        if (change["name"] == "labels"):                            if (change["values"]):                                labels = change["values"].split(" ")                            stop = True                            break                    if (stop):                        break            elif (interface == "cli"):                labels = self.cli.getLabels(key)            self.labels[key] = labels        return self.labels[key]            def existsLabels(self, key):        if (key in self.labels):            return self.labels[key]        else:            return None